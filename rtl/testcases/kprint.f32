HWREG_BASE = 0xE0000000
HWREG_UART_TX = 0x10

main:
    ld $sp, 0x3f80000
    ld $1, message
    ld $2, 12345678
    jsr  kprint

    ld $1, message
    ld $2, -4
    jsr  kprint

exit:
    ld $11,0
    jmp $11

message: dcb "Test %d", 10, 0

# ############################################################
#                         kprint
# ############################################################
# Output a string to the uart
# Input: $1 = format string
#        $2,$3,$4 = arguments (max 3)

kprint:
    ld $7, HWREG_BASE           # Load base address of hardware registers

.format_loop:
    ldb $6, $1[0]               # Load next character  -> $6
    add $1, 1                   # Increment pointer
    beq $6, 0, .format_done     # End of string
    ld $5, '%'                  # Check for '%'
    beq $6, $5, .check_specifier

.output_char:                   # Output character
    ldw $5, $7[HWREG_UART_TX]   # check for space in fifo
    beq $5, 0, .output_char
    stw $6, $7[HWREG_UART_TX]
    jmp .format_loop

.check_specifier:               # We have receied a '%'
    ldb $6, $1[0]               # Load next character  -> $6
    add $1, 1
    beq $6, 0, .format_done     # End of string

    ld $5, 'd'                  # Check for 'd'
    beq $6, $5, .print_int
    ld $5, 's'                  # Check for 's'
    beq $6, $5, .print_str
    ld $5, 'c'                  # Check for 'c'
    beq $6, $5, .print_char
    ld $5, 'x'                  # Check for 'x'
    beq $6, $5, .print_hex
    jmp .output_char            # Default case: print the character

.shift_args:
    ld $2, $3
    ld $3, $4
    ld $4, 0
    jmp .format_loop

.print_int:
    ld $8, 10                   # Make sure we have at least 10 slots in FIFO
    ldw $5, $7[HWREG_UART_TX]   
    blt $5, $8, .print_int

    bge $2, 0, .print_int_pos   # Check for negative
    ld $5, '-'                  # Print '-'
    stw $5, $7[HWREG_UART_TX]
    sub $2, 0, $2               # Make it positive

.print_int_pos:                 # generate the digits in reverse order
    sub $sp, 16                 # Make space on stack
    ld $6, $sp                  # $6 = pointer to space

.int_digit_loop:
    modu $5, $2, 10             # Get the next digit
    add $5, '0'                 # Convert to ASCII
    stb $5, $6[0]               # Store digit
    add $6, 1                   # Increment pointer
    divu $2, 10                 # Divide by 10
    bne $2, 0, .int_digit_loop

.print_int_reverse:             # Print the digits in reverse order
    sub $6, 1                   # Point to last digit
    ldb $5, $6[0]               # Load digit
    stw $5, $7[HWREG_UART_TX]
    bne $6, $sp, .print_int_reverse
    add $sp, 16                 # Restore stack
    jmp .shift_args

.print_str:
    ldw $5, $7[HWREG_UART_TX]   # check for space in fifo
    beq $5, 0 , .print_str      # Wait for space
    ldb $5, $2[0]               # Load next character  -> $5
    beq $5, 0, .shift_args      # End of string
    stw $5, $7[HWREG_UART_TX]
    add $2, 1
    jmp .print_str

.print_char:                    # Print character in $2
    ldw $5, $7[HWREG_UART_TX]   # check for space in fifo
    beq $5, 0, .print_char
    stw $2, $7[HWREG_UART_TX]
    jmp .shift_args

.print_hex:                     # Print hex in $2
    ld $8, 8                    # Number of digits left to print -> $8
    ldw $5, $7[HWREG_UART_TX]   # check for space in fifo for whole number
    blt $5, $8 , .print_hex     # Wait for space
                                # Now we have checked the fifo has space for the whole number
                                # we don't need to check for space again
.print_hex_loop:
    lsr $5, $2, 28              # Get the first nibble  -> $5
    lsl $2, 4                   # Shift $2 to the left
    ld $6, 10                   # Check if $5 is a number
    blt $5, $6, .print_hex_digit
    add $5, 7                   # Convert to letter
.print_hex_digit:
    add $5, '0'                 # Convert to ASCII
    stw $5, $7[HWREG_UART_TX]   # Print the digit
    sub $8, 1                   # Decrement number of digits left to print
    bne $8, 0, .print_hex_loop
    jmp .shift_args             # If we have printed all digits, we are done

.format_done:
    ret

