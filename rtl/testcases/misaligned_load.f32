# hardware registers
HWREG_BASE       = 0xE0000000
HWREG_7SEG       = 0x00     # 7-segment display
HWREG_LED        = 0x04     # 10 status LED's
HWREG_UART_TX    = 0x10     # Write to this to send a byte. Read gives free slots in fifo
HWREG_UART_RX    = 0x14     # Read to get a byte. -1 if empty
HWREG_SIMULATION = 0x30     # Reads as 1 in simulator, 0 on silicon


# Boot location
jmp start

# exception handler
exception:

    # Save $29 into !escratch
    cfg !escratch, $29
    ld $29, 0x03fff00       # $29 to a known location
    stw 0,   $29[0]          # Save the registers 
    stw $1,  $29[4]          # Save the registers 
    stw $2,  $29[8]
    stw $3,  $29[12]
    stw $4,  $29[16]
    stw $5,  $29[20]
    stw $6,  $29[24]
    stw $7,  $29[28]
    stw $8,  $29[32]
    stw $9,  $29[36]
    stw $10, $29[40]
    stw $11, $29[44]
    stw $12, $29[48]
    stw $13, $29[52]
    stw $14, $29[56]
    stw $15, $29[60]
    stw $16, $29[64]
    stw $17, $29[68]
    stw $18, $29[72]
    stw $19, $29[76]
    stw $20, $29[80]
    stw $21, $29[84]
    stw $22, $29[88]
    stw $23, $29[92]
    stw $24, $29[96]
    stw $25, $29[100]
    stw $26, $29[104]
    stw $27, $29[108]
    stw $28, $29[112]
    cfg $1, !escratch  # save $29
    stw $1,  $29[116] 
    stw $30, $29[120]
    stw $sp, $29[124]

    # now we have all the registers saved
    ld $sp, 0x03fff00            # set up a supervisor stack

    cfg $9, !ecause
    lsl $9,  2
    ld $10, message_table
    add $10, $9
    ldw $1, $10[0]
    jsr  /print

    ld $1, message2
    cfg $2, !epc
    cfg $3, !edata
    jsr  /print

    ld $10, 0x03fff00   # base address of the registers
    ld $11, 0           # register number

register_loop:

    # print the contents of register $($11)
    ld $1,10                # if reg number<10 then print a space
    bge $11, $1, .skip_space
    ld $1, message_char
    ld $2, 32
    jsr  /print
.skip_space:

    lsl $1, $11,2           # find the address where we stored the register contents
    add $1, $10
    ldw $3, $1[0]
    ld $1, message_register
    ld $2, $11
    jsr  /print

    add $11, 1              # increment to the next register

    and $1, $11, 7
    bne $1, 0, .skip_nl

    ld $1, message_char
    ld $2, 10
    jsr  /print
.skip_nl:

    and $11, 31
    bne $11, 0, register_loop

    cfg $1, !ecause

# ############################################################
#                        abort
# ############################################################
# Exit the Program. In simulation we do a jump to address 0
# This fires a trap in the simulator which causes the program to stop
# On the FPGA we just loop forever flashing the LED's
#
# Input: $1 = error code

/abort:
    ld $2, HWREG_BASE
    stw $1, $2[HWREG_7SEG]        # Display the error code on the 7-segment display
    ldw $1, $2[HWREG_SIMULATION]  # Check if we are running on FPGA or in a simulation
    beq $1, 0, .on_fpga

    ld $2, 0                      # If we are in a simulation jump to address 0
    jmp $2                        # This will cause a trap in the simulator which stops the program

.on_fpga:                         # on the FPGA we just loop forever flashing the LED's
    xor $1, 0x3FF                 # Toggle the LED's
    stw $1, $2[HWREG_LED]         # Set all the LED's
    ld  $3, 10000000              # Delay number
.delay:
    sub $3, 1
    bne $3, 0, .delay
    jmp .on_fpga

message_table:
    dcw message_unknown_exception
    dcw message_instruction_access_fault 
    dcw message_illegaal_instruction     
    dcw message_breakpoint               
    dcw message_misaligned_load          
    dcw message_load_access_fault        
    dcw message_misaligned_store         
    dcw message_store_access_fault       
    dcw message_environment_call         

message_unknown_exception:
    dcw 18
    dcb "exception unknown\n"


message_instruction_access_fault:
    dcw 35
    dcb "exception instruction_access_fault\n"

message_illegaal_instruction:
    dcw 31
    dcb "exception illegaal_instruction\n"

message_breakpoint:
    dcw 21
    dcb "exception breakpoint\n"

message_misaligned_load:
    dcw 26
    dcb "exception misaligned_load\n"

message_load_access_fault:
    dcw 28
    dcb "exception load_access_fault\n"

message_misaligned_store:
    dcw 27
    dcb "exception misaligned_store\n"

message_store_access_fault:
    dcw 29
    dcb "exception store_access_fault\n"

message_environment_call:
    dcw 27
    dcb "exception environment_call\n"

message2:
    dcw 16
    dcb "EPC=%x EDATA=%x\n"

message_register:
    dcw 6
    dcb "%d=%x "

message_char:
    dcw 2
    dcb "%c"


start:
ld $1, 0x12345   # some random odd address in memory
ldw $2, $1[0]    #  load a word from an odd address -> exception
ld $8,1          # load shouldn't happen


# ############################################################
#                         print
# ############################################################
# Output a string to the uart
# Input: $1 = format string
#        $2,$3,$4,$5 = arguments (max 4)

# uses   $8 = current location in format string
#        $9 = end of format string
#        $7 = HWREGS_BASE
#        $6 = current character
#        $5 = temporary

/print:
    sub $sp,4                   # allocate some space on the stack
    stw $9, $sp[0]
    ldw $9,$1[0]                # get length of format string
    add $8, $1, 4               # $8 = pointer to first char in format string
    add $9, $8                  # $9 = end of format string
    ld $7, HWREG_BASE           # Load base address of hardware registers

.shift_args:
    ld $1, $2                   # Shift the arguments down - so $1 is the first argument
    ld $2, $3
    ld $3, $4
    ld $4, $5

.format_loop:
    beq $8, $9, .format_done    # End of string
    ldb $6, $8[0]               # Load next character  -> $6
    add $8, 1                   # Increment pointer
    ld $5, '%'                  # Check for '%'
    beq $6, $5, .check_specifier

.output_char:                   # Output character
    ldw $5, $7[HWREG_UART_TX]   # check for space in fifo
    beq $5, 0, .output_char
    stw $6, $7[HWREG_UART_TX]
    jmp .format_loop

.check_specifier:               # We have receied a '%'
    beq $8, $9, .format_done    # End of string
    ldb $6, $8[0]               # Load next character  -> $6
    add $8, 1

    ld $5, 'd'                  # Check for 'd'
    beq $6, $5, .print_int
    ld $5, 's'                  # Check for 's'
    beq $6, $5, .print_str
    ld $5, 'c'                  # Check for 'c'
    beq $6, $5, .print_char
    ld $5, 'x'                  # Check for 'x'
    beq $6, $5, .print_hex
    jmp .output_char            # Default case: print the character

.print_int:                     # print an integer in $1
    ldw $5, $7[HWREG_UART_TX]   # Make sure we have at least 10 slots in FIFO
    sub $5, 10
    blt $5, 0, .print_int

    bge $1, 0, .print_int_pos   # Check for negative
    ld $5, '-'                  # Print '-'
    stw $5, $7[HWREG_UART_TX]
    sub $1, 0, $1               # Make it positive

.print_int_pos:                 # generate the digits in reverse order
    sub $sp, 16                 # Make space on stack
    ld $5, $sp                  # $5 = pointer to space

.int_digit_loop:
    modu $6, $1, 10             # Get the next digit
    add $6, '0'                 # Convert to ASCII
    stb $6, $5[0]               # Store digit
    add $5, 1                   # Increment pointer
    divu $1, 10                 # Divide by 10
    bne $1, 0, .int_digit_loop

.print_int_reverse:             # Print the digits in reverse order
    sub $5, 1                   # Point to last digit
    ldb $6, $5[0]               # Load digit
    stw $6, $7[HWREG_UART_TX]
    bne $5, $sp, .print_int_reverse
    add $sp, 16                 # Restore stack
    jmp .shift_args

.print_str:                     # print a string in $1
    ldw $5, $1[0]               # get the length of the string
    add $1, 4                   # $1 = pointer to first char in string
    add $5, $1                  # $5 = end of string

.print_str_loop:
    beq $1, $5, .shift_args     # End of string
    ldw $6, $7[HWREG_UART_TX]   # check for space in fifo
    beq $6, 0, .print_str_loop  # Wait for space

    ldb $6, $1[0]               # Load next character  -> $6
    add $1, 1                   # Increment pointer
    stw $6, $7[HWREG_UART_TX]   # Output character
    jmp .print_str_loop

.print_char:                    # Print character in $1
    ldw $5, $7[HWREG_UART_TX]   # check for space in fifo
    beq $5, 0, .print_char
    stw $1, $7[HWREG_UART_TX]
    jmp .shift_args

.print_hex:                     # Print hex in $2
    ld $5, 8                    # Number of digits left to print -> $5
    ldw $6, $7[HWREG_UART_TX]   # check for space in fifo for whole number
    blt $6, $5 , .print_hex     #
    
.print_hex_loop:
    lsr $6, $1, 28              # Get the first nibble  -> $6
    lsl $1, 4                   # Shift $1 to the left
    sub $6, 10                  # Check if $5 is a number or a letter
    blt $6, 0, .print_hex_digit
    add $6, 7                   # Convert to letter
.print_hex_digit:
    add $6, 58                 # Convert to ASCII
    stw $6, $7[HWREG_UART_TX]   # Print the digit
    sub $5, 1                   # Decrement number of digits left to print
    bne $5, 0, .print_hex_loop
    jmp .shift_args             # If we have printed all digits, we are done

.format_done:
    ldw $9, $sp[0]
    add $sp, 4                   # Restore stack
    ret
