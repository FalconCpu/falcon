# Euclidean Algorithm to compute the Greatest Common Divisor (GCD)
# Inputs: two numbers in registers $1 and $2
# Output: GCD in register $3

start:
    ld  $1, 56         # Load first number into register $1 (e.g., 56)
    ld  $2, 98         # Load second number into register $2 (e.g., 98)

compute_gcd:
    beq $1, 0, done2    # If $1 == 0, GCD is $2
    beq $2, 0, done1    # If $2 == 0, GCD is $1

    blt $1, $2, swap   # If $1 < $2, swap $1 and $2

    modu $1, $2        # $1 = $1 % $2
    jmp compute_gcd    # Repeat the loop

swap:
    ld  $5, $1         # Temp = $1
    ld  $1, $2         # $1 = $2
    ld  $2, $5         # $2 = Temp
    jmp compute_gcd    # Repeat the loop

done2:                 # GCD is in $2
    ld $1, $2
done1:                 # GCD is in $1

store_gcd:
    ld $4, 0xE0000000  # Base address of the memory-mapped IO
    stw $1, $4[0]      # Display the GCD on the 7-segment display

# End of program
ld $11,0
jmp $11