
class Terminal (val keyboard:Keyboard)
    val stringBuilder = new StringBuilder()

    val screenWidth = 80
    val screenHeight = 40
    val fontWidth = 8
    val fontHeight = 12

    var posX = 0        # The screen coordinates to draw the next char
    var posY = 0
    var color = 15
    var bgColor = 0
    var cursorColor = 3

    var homeX = 0       # The coordinates the current string Builder begins at
    var homeY = 0
    var cursor = 0      

    fun clearScreen()
        fillRect(0, 0, screenWidth*fontWidth, screenHeight*fontHeight, 0)
        posX = 0
        posY = 0

    fun clearToEndOfLine()
        fillRect(posX*fontWidth, posY*fontHeight, screenWidth*fontWidth, (posY+1)*fontHeight-1, 0)

    fun printChar(c:Char)
        if c = '\n'
            posX = 0
            posY = posY + 1
        else
            drawCharBg(posX*fontWidth, posY*fontHeight, c, color, bgColor)
            posX = posX + 1
            if posX >= screenWidth
                posX = 0
                posY = posY + 1
        
        if posY >= screenHeight
            scrollScreen(fontHeight)
            posY = posY - 1
            homeY = homeY - 1

    fun printString(s:String)
        for i=0 to <s.length
            printChar(s[i])

    fun setHome()
        homeX = posX
        homeY = posY

    fun goHome()
        posX = homeX
        posY = homeY

    fun printStringBuilderWithCursor()
        goHome()
        for i = 0 to < stringBuilder.length
            bgColor = if i=cursor then cursorColor else 0
            printChar(stringBuilder.get(i))

        # print one more space at the end
        bgColor = if stringBuilder.length=cursor then cursorColor else 0
        printChar(' ')
        bgColor = 0
        clearToEndOfLine()

    fun readLine() -> String
        setHome()
        cursor = 0
        stringBuilder.clear()

        while true
            printStringBuilderWithCursor()
            val key = keyboard.waitKey()
            when key
                '\n' ->
                    # redraw the string without the cursor
                    cursor = -1
                    printStringBuilderWithCursor()
                    printChar('\n')
                    return stringBuilder.toString()

                KEY_LEFT ->
                    if cursor!=0
                        cursor = cursor - 1
                    if keyboard.lctrl or keyboard.rctrl
                        while cursor!=0 and stringBuilder.get(cursor)!=' '
                            cursor = cursor - 1

                KEY_RIGHT ->
                    if cursor!=stringBuilder.length
                        cursor = cursor + 1
                    if keyboard.lctrl or keyboard.rctrl
                        while cursor!=stringBuilder.length and stringBuilder.get(cursor)!=' '
                            cursor = cursor + 1

                KEY_BACKSPACE ->
                    if cursor!=0
                        stringBuilder.remove(cursor-1)
                        cursor = cursor - 1

                KEY_HOME ->
                    cursor = 0

                KEY_END ->
                    cursor = stringBuilder.length

                KEY_DELETE ->
                    if cursor!=stringBuilder.length
                        stringBuilder.remove(cursor)

                else -> 
                    if key>=' ' and key<='~'
                        stringBuilder.insert(cursor,key)
                        cursor = cursor + 1
        end while
    end fun            

    fun printf(format:String, args:Any...)
        val sb = new StringBuilder()
        sb.vsprintf(format,args)
        printString(sb.toString())
        delete sb


class CommandLine(keyboard:Keyboard)
    val terminal = new Terminal(keyboard)

    fun cmdClear(words:List<String>)
        if words.length=1
            terminal.clearScreen()
        else
            terminal.printString("Usage: clear\n")

    fun cmdVersion(words:List<String>)
        if words.length=1
            terminal.printf("Version 0.1\n")
        else
            terminal.printf("Usage: version\n")

    fun cmdEcho(words:List<String>)
        for i=1 to <words.length
            terminal.printf("%s ",words.get(i))
        terminal.printf("\n")

    fun cmdHelp(words:List<String>)
        if words.length=1
            terminal.printf("Available commands:\n")
            terminal.printf("  clear\n")
            terminal.printf("  version\n")
            terminal.printf("  echo <text>\n")
            terminal.printf("  help\n")
            terminal.printf("  ls\n")

    fun cmdLs(words:List<String>)
        terminal.printf("Need to implement a file system :-)  \n")

    fun processCommand(command: String)
        val words = splitString(command,' ')
        if words.length=0
            return
        when words.get(0)
            "clear" -> cmdClear(words)
            "version" -> cmdVersion(words)
            "echo" -> cmdEcho(words)
            "help" -> cmdHelp(words)
            "ls" -> cmdLs(words)
            "dumpmem" -> dumpMemorySystem()
            else -> terminal.printf("Unknown command: %s\n", words.get(0))
        for word in words
            delete word
        delete words

    fun run()
        terminal.printf("> ")
        val line = terminal.readLine()
        processCommand(line)

fun main()
    val keyboard = new Keyboard()
    val cmd = new CommandLine(keyboard)
    while true
        cmd.run()


