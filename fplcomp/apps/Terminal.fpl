
class Terminal (val keyboard:Keyboard)
    val stringBuffer = new StringBuffer()

    val screenWidth = 80
    val screenHeight = 40
    val fontWidth = 8
    val fontHeight = 12

    var posX = 0        # The screen coordinates to draw the next char
    var posY = 0
    var color = 15
    var bgColor = 0
    var cursorColor = 3

    var homeX = 0       # The coordinates the current string buffer begins at
    var homeY = 0
    var cursor = 0      

    fun clearScreen()
        fillRect(0, 0, screenWidth*fontWidth, screenHeight*fontHeight, 0)
        posX = 0
        posY = 0

    fun clearToEndOfLine()
        # print("clearing %d %d\n", posX*fontWidth, posY*fontHeight)   
        fillRect(posX*fontWidth, posY*fontHeight, screenWidth*fontWidth, (posY+1)*fontHeight-1, 0)

    fun printChar(c:Char)
        if c = '\n'
            posX = 0
            posY = posY + 1
        else
            drawCharBg(posX*fontWidth, posY*fontHeight, c, color, bgColor)
            posX = posX + 1
            if posX >= screenWidth
                posX = 0
                posY = posY + 1
        
        if posY >= screenHeight
            scrollScreen(fontHeight)
            posY = posY - 1
            homeY = homeY - 1

    fun printString(s:String)
        var i = 0
        while s[i]!=0
            printChar(s[i])
            i = i + 1

    fun setHome()
        homeX = posX
        homeY = posY

    fun goHome()
        posX = homeX
        posY = homeY

    fun printStringBufferWithCursor()
        goHome()
        for i = 0 to < stringBuffer.length
            bgColor = if i=cursor then cursorColor else 0
            printChar(stringBuffer.get(i))

        # print one more space at the end
        bgColor = if stringBuffer.length=cursor then cursorColor else 0
        printChar(' ')
        bgColor = 0
        clearToEndOfLine()

    fun readLine() -> String
        setHome()
        cursor = 0
        stringBuffer.clear()

        while true
            # Print the current string
            printStringBufferWithCursor()

            # wait for a key
            val key = keyboard.waitKey()

            # process the key
            if key = '\n'
                # redraw the string without the cursor
                cursor = -1
                printStringBufferWithCursor()
                return stringBuffer.toString()

            elsif key=KEY_LEFT
                if cursor!=0
                    cursor = cursor - 1

            elsif key=KEY_RIGHT
                if cursor!=stringBuffer.length
                    cursor = cursor + 1

            elsif key=KEY_BACKSPACE
                if cursor!=0
                    stringBuffer.remove(cursor-1)
                    cursor = cursor - 1

            elsif key=KEY_HOME
                cursor = 0

            elsif key=KEY_END
                cursor = stringBuffer.length

            elsif key=KEY_DELETE
                if cursor!=stringBuffer.length
                    stringBuffer.remove(cursor)

            elsif key>=' ' and key<='~'
                stringBuffer.insert(cursor,key)
                cursor = cursor + 1
        end while
    end fun            

fun main()
    val keyboard = new Keyboard()
    val terminal = new Terminal(keyboard)

    while true
        terminal.printString("> ")
        val line = terminal.readLine()
        val words = splitString(line,' ')
        terminal.printString("\nYou typed ")
        for word in words
            terminal.printString("<")
            terminal.printString(word)
            terminal.printString("> ")
        terminal.printChar('\n')
