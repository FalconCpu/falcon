class StringBuffer
    var alloc = 128
    var length = 0
    var buffer = new Array<Char>(alloc)

    fun resize(newAlloc:Int)
        if newAlloc > alloc
            alloc = newAlloc
            val old = buffer
            buffer = new Array<Char>(newAlloc)
            memcpy(buffer, old, alloc)
            free(old)

    fun append(c:Char)
        if length+1 >= alloc
            resize(alloc*2)
        buffer[length] = c
        length = length + 1
        buffer[length] = 0

    fun toString() -> String
        val ret = new String(length)
        memcpy( (ret:Pointer)+4, buffer, length)
        return ret

    fun insert(index:Int, c:Char)
        if length + 1 >= alloc
            resize(alloc*2)
        var at = if index >= length then length else index
        for i=length to > at
            buffer[i]=buffer[i-1]
        buffer[at] = c
        length = length + 1
        buffer[length] = 0

    fun remove(index:Int)
        if index >= length
            return
        for i=index to length-1
            buffer[i] = buffer[i+1]
        buffer[length] = 0
        length = length - 1

    fun clear()
        length = 0

    fun get(at:Int) -> Char
        return buffer[at]

