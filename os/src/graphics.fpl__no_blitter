class Hwregs
    var   seven_seg   : Int    # 
    var   ledr        : Int    # 10 LEDs
    val   sw          : Int    # 10 Switches    
    val   key         : Int    # 4 Push buttons
    var   uart_tx     : Int    # Write = byte of data to transmit, read = number of slots free in fifo
    val   uart_rx     : Int    # 1 byte of data from the uart, -1 if no data
    val   mouse_x     : Int    # 10 bit mouse x position
    val   mouse_y     : Int    # 10 bit mouse y position
    val   mouse_btn   : Int    # 3 bit mouse buttons
    val   keycode     : Int    # Keyboard scan code, or -1 if no key pressed

class Blitter
    var   command     : Int    # 32 bit command register
    var   width       : Short
    var   height      : Short
    var   x1          : Short
    var   y1          : Short
    var   x2          : Short
    var   y2          : Short

class BlitterWord              # Copy of blitter class, but with pointer fields
    var   command     : Int    # 32 bit command register
    var   address     : Pointer
    var   x1          : Short
    var   y1          : Short
    var   x2          : Short
    var   y2          : Short


const font_data = new Array<Char> {
   0,0,0,0,0,0,0,0,0,0,0,0,                 # 
   24,24,24,24,24,24,24,0,24,0,0,0,         # !
   102,102,0,0,0,0,0,0,0,0,0,0,             # "
   54,54,54,127,54,127,118,54,54,0,0,0,     # #
   12,62,3,3,62,96,96,62,12,0,0,0,          # $
   99,51,48,24,24,12,12,102,102,0,0,0,      # %
   30,51,3,6,6,31,51,51,110,0,0,0,          # &
   24,24,0,0,0,0,0,0,0,0,0,0,               # '
   24,12,12,12,12,12,12,12,24,0,0,0,        # (
   24,48,48,48,48,48,48,48,24,0,0,0,        # )
   99,99,54,28,127,28,54,99,99,0,0,0,       # *
   0,12,12,12,63,12,12,12,0,0,0,0,          # +
   0,0,0,0,0,0,0,24,24,12,0,0,              # ,
   0,0,0,0,0,62,0,0,0,0,0,0,                # -
   0,0,0,0,0,0,0,24,24,0,0,0,               # .
   96,48,48,24,24,12,12,6,6,0,0,0,          # /
   30,51,51,51,51,51,51,51,30,0,0,0,        # 0
   24,28,24,24,24,24,24,24,126,0,0,0,       # 1
   62,99,48,48,24,12,12,6,127,0,0,0,        # 2
   62,99,96,96,62,96,96,99,62,0,0,0,        # 3
   56,60,54,51,51,127,48,48,120,0,0,0,      # 4
   127,3,3,63,96,96,96,99,30,0,0,0,         # 5
   60,6,3,3,63,99,99,99,62,0,0,0,           # 6
   126,98,48,48,24,12,12,12,12,0,0,0,       # 7
   62,99,99,99,62,99,99,99,62,0,0,0,        # 8
   62,99,99,99,126,96,96,96,60,0,0,0,       # 9
   0,0,24,24,0,0,24,24,0,0,0,0,             # :
   0,0,24,24,0,0,24,24,12,0,0,0,            # ;
   0,0,48,12,3,12,48,0,0,0,0,0,             # <
   0,0,0,126,0,0,126,0,0,0,0,0,             # =
   0,0,6,24,96,24,6,0,0,0,0,0,              # >
   60,102,96,96,56,24,24,0,24,0,0,0,        # ?
   30,51,51,51,59,59,59,3,30,0,0,0,         # @
   24,60,60,102,102,126,195,195,195,0,0,0,  # A
   63,102,102,102,62,102,102,102,63,0,0,0,  # B
   62,99,3,3,3,3,3,99,62,0,0,0,             # C
   63,102,102,102,102,102,102,102,63,0,0,0, # D
   127,102,6,6,30,6,6,102,127,0,0,0,        # E
   127,102,6,6,30,6,6,6,7,0,0,0,            # F
   60,102,3,3,115,99,99,102,60,0,0,0,       # G
   51,51,51,51,63,51,51,51,51,0,0,0,        # H
   63,12,12,12,12,12,12,12,63,0,0,0,        # I
   56,48,48,48,48,48,51,51,30,0,0,0,        # J
   103,102,54,54,30,54,54,102,103,0,0,0,    # K
   7,6,6,6,6,6,6,70,127,0,0,0,              # L
   65,99,119,107,99,99,99,99,99,0,0,0,      # M
   99,99,103,103,107,115,115,99,99,0,0,0,   # N
   28,54,99,99,99,99,99,54,28,0,0,0,        # O
   63,102,102,102,62,6,6,6,7,0,0,0,         # P
   28,54,99,99,99,99,99,54,60,96,0,0,       # Q
   63,102,102,102,62,54,54,102,103,0,0,0,   # R
   30,51,3,3,30,48,48,51,30,0,0,0,          # S
   63,45,12,12,12,12,12,12,30,0,0,0,        # T
   51,51,51,51,51,51,51,51,62,0,0,0,        # U
   195,195,195,102,102,102,60,60,24,0,0,0,  # V
   99,99,99,99,107,107,127,119,99,0,0,0,    # W
   195,102,102,60,24,60,102,102,195,0,0,0,  # X
   195,195,102,102,60,24,24,24,24,0,0,0,    # Y
   127,99,49,48,24,12,76,102,127,0,0,0,     # Z
   30,6,6,6,6,6,6,6,30,0,0,0,               # [
   3,6,12,12,24,48,48,96,192,0,0,0,         # \
   30,24,24,24,24,24,24,24,30,0,0,0,        # ]
   8,20,34,65,0,0,0,0,0,0,0,0,              # ^
   0,0,0,0,0,0,0,0,0,255,0,0,               # _
   4,8,16,0,0,0,0,0,0,0,0,0,                # `
   0,0,30,48,48,62,51,51,110,0,0,0,         # a 
   7,6,6,62,102,102,102,102,62,0,0,0,       # b
   0,0,62,99,3,3,3,99,62,0,0,0,             # c
   56,48,48,62,51,51,51,51,110,0,0,0,       # d
   0,0,30,51,51,63,3,51,30,0,0,0,           # e
   60,102,6,6,15,6,6,6,15,0,0,0,            # f
   0,0,220,102,102,102,60,96,99,62,0,0,     # g
   7,6,6,62,102,102,102,102,103,0,0,0,      # h
   0,24,0,28,24,24,24,24,28,0,0,0,          # i
   0,48,0,56,48,48,48,48,51,30,0,0,         # j
   7,6,102,102,54,30,54,102,103,0,0,0,      # k
   28,24,24,24,24,24,24,24,60,0,0,0,        # l
   0,0,51,119,107,107,99,99,99,0,0,0,       # m
   0,0,31,51,51,51,51,51,51,0,0,0,          # n
   0,0,30,51,51,51,51,51,30,0,0,0,          # o
   0,0,59,102,102,102,102,62,6,6,15,0,      # p
   0,0,30,51,51,51,51,62,48,48,112,0,       # q
   0,0,55,110,102,6,6,6,15,0,0,0,           # r
   0,0,30,35,3,30,48,49,30,0,0,0,           # s
   4,6,31,6,6,6,6,22,12,0,0,0,              # t
   0,0,99,99,99,99,99,99,62,0,0,0,          # u
   0,0,99,99,99,99,54,28,8,0,0,0,           # v
   0,0,99,107,107,107,54,54,54,0,0,0,       # w
   0,0,99,54,54,28,54,54,99,0,0,0,          # x
   0,0,51,51,51,51,51,30,12,12,7,0,         # y
   0,0,63,25,24,12,6,38,63,0,0,0,           # z
   56,12,12,12,6,12,12,12,56,0,0,0,         # {
   24,24,24,24,24,24,24,24,24,0,0,0,        # |
   28,48,48,48,96,48,48,48,28,0,0,0,        # }
   6,73,73,48,0,0,0,0,0,0,0,0}              # ~


fun drawPixel(x:Int, y:Int, color:Int)  
    if x<0 or x>=640 or y<0 or y>=480
        return
    val frameBuffer = (0x3f80000:Array<Char>)
    frameBuffer[y*640+x] = (color:Char)

fun abs(a:Int)->Int
    if a>=0
        return a
    else
        return -a

fun drawLine(x0: Int, y0: Int, x1: Int, y1: Int, color: Int)
    val dx = abs(x1-x0)
    val dy = abs(y1-y0)
    val sx = if x0 < x1 then 1 else -1
    val sy = if y0 < y1 then 1 else -1
    var err = dx - dy
    val frameBuffer = (0x3f80000:Array<Char>)

    var x = x0
    var y = y0
    while true
        frameBuffer[y*640+x] = (color:Char)
        if x = x1 and y = y1
            return
        val e2 = err * 2
        if e2 > -dy
            err = err - dy
            x = x + sx
        if e2 < dx
            err = err + dx
            y = y + sy

fun fillRect(x1: Int, y1: Int, x2:Int, y2:Int, color: Int)
    # Todo: Check for overflow
    val frameBuffer = (0x3f80000:Array<Char>)
    for y = y1 to y2
        for x = x1 to x2
            frameBuffer[y*640+x] = (color:Char)

fun drawChar(x:Int, y:Int, c:Char, color:Int) 
    val frameBuffer = (0x3f80000:Array<Char>)
    val fontOffset = ((c:Int)-32)*12
    for i = 0 to 11
        val fontByte = (font_data[fontOffset+i] : Int)
        for j = 0 to 7
            if ((fontByte lsr j)& 1) != 0 
                val xx = x+j
                val yy = y+i
                if xx>0 and xx<640 and yy>=0 and yy<480
                    frameBuffer[yy*640+xx] = (color:Char)

fun drawCharBg(x:Int, y:Int, c:Char, fgColor:Int, bgColor:Int) 
    val frameBuffer = (0x3f80000:Array<Char>)
    val fontOffset = ((c:Int)-32)*12
    for i = 0 to 11
        val fontByte = (font_data[fontOffset+i] : Int)
        for j = 0 to 7
            val cc = if ((fontByte lsr j)& 1) != 0 then fgColor else bgColor
            val xx = x+j
            val yy = y+i
            if xx>0 and xx<640 and yy>=0 and yy<480
                frameBuffer[yy*640+xx] = (cc:Char)

fun scrollScreen(amount:Int)
    memcpy((0x3f80000:Pointer), (0x3f80000+amount*640:Pointer), 640*480-amount*640)
    fillRect(0, 480-amount, 640, 480, 0)

