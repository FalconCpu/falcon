# #####################################################################
#                             File System
# #####################################################################
# 
# We don't have any persistent storage on the FPGA, so we have to
# use the host pc to store the files. However I want the user experience on the 
# FPGA side to be as much like a real computer as possible - so the aim here is
# to build something that presents an interface as much like a file system as possible.
#
# The basic UART protocol will consis of packets contianing:-
#  *  Command word         4 bytes - see below for command words
#  *  Data                 0 or more bytes
#
# All commands start with the byte 0xB0 - this is used to indicate to the host to switch from 
# termianl mode to file system mode.
#
# Strings will be represented as a null terminated string rounded up in length to a multiple of 4 bytes.
#

const ERROR_NONE           = 0x00000000     # No error
const ERROR_INVALID_ARG    = 0x00000001     # Invalid argument
const ERROR_FILE_NOT_FOUND = 0x00000002     # File not found
const ERROR_DATA_CORRUPT   = 0x00000003     # Data corrupt
const ERROR_PROTOCOL       = 0x00000004     # Protocol error
const ERROR_TIMEOUT        = 0x00000005     # Timeout

const FILESYSPKT_OPEN      = 0x40B2B1B0     # Open a file. Payload:-
                                            #    filemode:Int  = 'r' 'w' 'a' for read, write, append
                                            #    filename:String = name of file to open
const FILESYSPKT_CLOSE     = 0x41B2B1B0     # Close a file. Payload:-
                                            #    fileid:Int = id of file to close
const FILESYSPKT_READ      = 0x42B2B1B0     # Read from a file. Payload:-
                                            #    fileid:Int = id of file to read
                                            #    length:Int = number of bytes to read
const FILESYSPKT_WRITE     = 0x43B2B1B0     # Write to a file. Payload:-
                                            #    fileid:Int = id of file to write
                                            #    length:Int = number of bytes to write
                                            #    data:Array<Int> = array of bytes to write

const FILESYSPKT_DATA      = 0x44B2B1B0     # Data packet - sent in response to a read/open command
                                            #    data:Array<Int> = array of bytes to write

const FILESYSPKT_ERROR     = 0x45B2B1B0     # Error packet -  sent in response to a read/open command
                                            #    error:Int = error code
const FILESYSPKT_READDIR   = 0x46B2B1B0     # Read directory. Payload:-
                                            #    dirname:String = name of directory to read             
                                            # response Data packet containing:-
                                            #    directory handle
                                            #    file length
                                            #    file atrributes
                                            #    file name length
                                            #    filename:String = name of file
const FILESYSPKT_NEXTDIR   = 0x47B2B1B0     #  Read next directory entry. Payload:-
                                            #    dirhandle:Int = handle of directory to read       
                                            # response Data packet as for FILESYSPKT_READDIR
const FILESYSPKT_CLOSEDIR  = 0x48B2B1B0     # Close directory. Payload:-
                                            #    dirhandle:Int = handle of directory to close           




# Constants for file attributes
const FILE_ATTRIBUTE_READONLY  = 0x00000001
const FILE_ATTRIBUTE_HIDDEN    = 0x00000002
const FILE_ATTRIBUTE_SYSTEM    = 0x00000004
const FILE_ATTRIBUTE_DIRECTORY = 0x00000010


class FileSystem

    # The data packets that are sent to/from the host:-



    # The error variable is set whenever there is an error.


    var error = ERROR_NONE

    # ######################################################################
    #                          openFile
    # ######################################################################
    # Open a file. Returns the file handle on success, 0 on failure

    fun openFile(filename:String, mode:Char) -> File?
        if mode != 'r' and mode != 'w' and mode != 'a' or filename.length = 0
            error = ERROR_INVALID_ARG
            return null
        
        # Send the request
        error = ERROR_NONE
        uartTransmitWord(FILESYSPKT_OPEN)
        uartTransmitWord((mode:Int))
        uartTransmitString(filename)

        # get the response
        val cmd = uartReceiveCmdWord()
        if cmd = FILESYSPKT_ERROR
            error = uartReceiveWord()
            print("Error: Got error %x", error)
            return null
        elsif cmd != FILESYSPKT_DATA
            print("Error: Got pkt %x", cmd)
            error = ERROR_PROTOCOL
            return null

        val data = uartReceiveWord()
        if error!=0 then return null

        return new File(data, this)

    # ######################################################################
    #                          openDirectory
    # ######################################################################
    # Open a directory. Returns the drectory handle on success, 0 on failure

    fun openDirectory(dirname:String) -> Directory?
        if dirname.length = 0
            error = ERROR_INVALID_ARG
            return null

        # Send the request
        error = ERROR_NONE
        uartTransmitWord(FILESYSPKT_READDIR)
        uartTransmitString(dirname)
        
        # get the response
        val cmd = uartReceiveCmdWord()
        if cmd = FILESYSPKT_ERROR
            error = uartReceiveWord()
            return null
        if cmd != FILESYSPKT_DATA
            print("Error: Got pkt %x", cmd)
            error = ERROR_PROTOCOL
            return null
        
        val ret = new Directory(this)
        ret.readContents()
        return ret


    # ######################################################################
    #                          UartSendString
    # ######################################################################
    # Send a string over the UART, with a null terminator

    fun uartTransmitString(s:String)
        for i=0 to< s.length
            uartTransmitByte(s[i])
        uartTransmitByte(0)

    # ######################################################################
    #                          uartReceiveCommandWord
    # ######################################################################
    # Receive a command word over the UART.
    # Commands begin with the byte 0xB0. Allow a few other bytes to be received before the command.
    # Returns -1 on timeout and sets error to ERROR_TIMEOUT

    fun uartReceiveCmdWord() -> Int
        var timeout = 100
        var byte0 = -1
        while byte0 != 0xB0 and timeout > 0
            byte0 = uartReceiveByte()
            if byte0 != 0xB0 and byte0!=-1
                print("CW Error: Got byte %x\n", byte0)
            timeout -= 1
        
        if byte0 = -1 
            error = ERROR_TIMEOUT
            return -1

        val byte1 = uartReceiveByte()
        if byte1 = -1 then return -1

        val byte2 = uartReceiveByte()
        if byte2 = -1 then return -1

        val byte3 = uartReceiveByte()
        if byte3 = -1 then return -1

        return (byte0 & 0xff) | ((byte1 & 0xff) lsl 8) | ((byte2&0xff) lsl 16) | ((byte3 & 0xff) lsl 24)



    # ######################################################################
    #                          roundUpToMultipleOf4
    # ######################################################################

    fun roundUpToMultipleOf4(x:Int) -> Int
        return (x + 3) & 0xFFFFFFFC

    # ######################################################################
    #                          storeWord
    # ######################################################################
    # Writes a word at an arbitary address in memory

    fun storeWord(dest:Array<Char>, offset:Int, value:Int)
        dest[offset]   = ((value lsr 0) & 0xff : Char)
        dest[offset+1] = ((value lsr 8) & 0xff : Char)
        dest[offset+2] = ((value lsr 16) & 0xff : Char)
        dest[offset+3] = ((value lsr 24) & 0xff : Char)





# ######################################################################
#                          File class - 
# ######################################################################
# Handles read/write etc

class File(val hostHandle:Int, val fs:FileSystem)
    var error = ERROR_NONE

    # ######################################################################
    #                          ReadFile
    # ######################################################################
    # Read data from a file. Returns the number of bytes read on success, 
    # 0 on failure

    fun read(destination:Array<Char>, maxLength:Int) -> Int

        # send the request
        uartTransmitWord(FILESYSPKT_READ)
        uartTransmitWord(hostHandle)
        uartTransmitWord(maxLength)

        # get the response
        val cmd = fs.uartReceiveCmdWord()
        if cmd = FILESYSPKT_ERROR
            error = uartReceiveWord()
            return 0
        elsif cmd != FILESYSPKT_DATA
            error = ERROR_PROTOCOL
            return 0

        val dataLen = uartReceiveWord()
        if dataLen > maxLength
            error = ERROR_PROTOCOL
            return 0

        for i = 0 to <dataLen
            destination[i] = (uartReceiveByte() : Char)
            if fs.error!=0
                error = fs.error
                return 0

        return dataLen

    # ######################################################################
    #                          Write
    # ######################################################################
    # Write data to a file. Returns the number of bytes written on success
    # 0 on failure

    fun write(source:Array<Char>, length:Int) -> Int
        # send the request
        uartTransmitWord(FILESYSPKT_WRITE)
        uartTransmitWord(hostHandle)
        uartTransmitWord(length)
        for i=0 to <length
            uartTransmitByte(source[i])

        if fs.error!=0
            error = fs.error
            return 0

        # get the response
        val cmd = fs.uartReceiveCmdWord()
        if cmd = FILESYSPKT_ERROR
            error = uartReceiveWord()
            return 0
        if cmd != FILESYSPKT_DATA
            error = ERROR_PROTOCOL
            return 0
        val dataLen = uartReceiveWord()
        return dataLen

    # ######################################################################
    #                         Write String
    # ######################################################################
    # Write a string to the file

    fun writeString(str:String)
        write((str:Array<Char>), str.length)

    # ######################################################################
    #                         Close File 
    # ######################################################################
    # When the file handle is deleted, close the file
    fun delete()
        uartTransmitWord(FILESYSPKT_CLOSE)
        uartTransmitWord(hostHandle)


# ######################################################################
#                          Directory class
# ######################################################################

class Directory(val fs:FileSystem)
    var error = ERROR_NONE
    var dirHandle = -1
    var name = ""
    var length = 0
    var filenameLength = 0
    var attributes = 0

    fun readContents()
        dirHandle = uartReceiveWord()
        if dirHandle = -1
            error = ERROR_PROTOCOL
            return
        length = uartReceiveWord()
        attributes = uartReceiveWord()
        filenameLength = uartReceiveWord()
        if name.length !=0
            delete name
        name = new String(filenameLength)
        for i=0 to <filenameLength
            name[i] = (uartReceiveByte() : Char)
        if fs.error!=0
            error = fs.error
            return

    fun nextEntry() ->  Bool
        if dirHandle = -1
            return false

        uartTransmitWord(FILESYSPKT_NEXTDIR)
        uartTransmitWord(dirHandle)

        val response = fs.uartReceiveCmdWord()
        if response = FILESYSPKT_DATA
            readContents()
            return true
        elsif response = FILESYSPKT_ERROR
            val e = uartReceiveWord()
            if e!=18   # ERROR_NO_MORE_FILES
                print ("nextEntry error: %d\n",e)
                error = e
            return false
        else
            error = ERROR_PROTOCOL
            return false



    fun delete()
        if dirHandle = -1
            return
        uartTransmitWord(FILESYSPKT_CLOSEDIR)
        uartTransmitWord(dirHandle)







