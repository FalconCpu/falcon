# #####################################################################
#                             File System
# #####################################################################
# 
# We don't have any persistent storage on the FPGA, so we have to
# use the host pc to store the files.
# 
# In this module we implement a simple file system like interface,
# implemented by a UART protocol to the host pc.
#
# Basic UART protocol will consis of packets contianing:-
#  *  Command word         4 bytes - see below for command words
#  *  Length of packet     4 bytes - length of data section in bytes
#  *  Checksum of packet   4 bytes - simple sum of all words in data section + command word
#  *  Data                 0 or more bytes
#
# All commands start with the byte 0xB0 - this is used to indicate to the host to switch from 
# termianl mode to file system mode.
#
# Strings will be represented as a null terminated string rounded up in length to a multiple of 4 bytes.
#



class FileSystem

    const FILESYSPKT_OPEN      = 0x4F50454E     # Open a file. Payload:-
                                                #    filemode:Int  = 'r' 'w' 'a' for read, write, append
                                                #    filename:String = name of file to open
    
    const FILESYSPKT_CLOSE     = 0x434C534F     # Close a file. Payload:-
                                                #    fileid:Int = id of file to close

    const FILESYSPKT_READ      = 0x44455252     # Read from a file. Payload:-
                                                #    fileid:Int = id of file to read
                                                #    length:Int = number of bytes to read
                                                
    const FILESYSPKT_WRITE     = 0x45545257     # Write to a file. Payload:-
                                                #    fileid:Int = id of file to write
                                                #    length:Int = number of bytes to write
                                                #    data:Array<Int> = array of bytes to write

    const FILESYSPKT_DATA      = 0x41544144     # Data packet - sent in response to a read/open command
                                                #    data:Array<Int> = array of bytes to write

    const FILESYSPKT_ERROR     = 0x4552524F     # Error packet -  sent in response to a read/open command
                                                #    error:Int = error code


    # The error variable is set whenever there is an error.

    const ERROR_NONE           = 0x00000000     # No error
    const ERROR_INVALID_ARG    = 0x00000001     # Invalid argument
    const ERROR_FILE_NOT_FOUND = 0x00000002     # File not found
    const ERROR_DATA_CORRUPT   = 0x00000003     # Data corrupt
    const ERROR_PROTOCOL       = 0x00000004     # Protocol error
    const ERROR_TIMEOUT        = 0x00000005     # Timeout

    var error = ERROR_NONE

    # ######################################################################
    #                          OpenFile
    # ######################################################################
    # Open a file. Returns the file handle on success, 0 on failure

    fun OpenFile(filename:String, mode:Int) -> Int
        if mode != 'r' and mode != 'w' and mode != 'a' or filename.length = 0
            error = ERROR_INVALID_ARG
            return 0
        
        # build the packet
        val len = 4 + roundUpToMultipleOf4(filename.length)
        val data = new Array<Int>(4+len/4)
        data[0] = mode
        memcpy((data:Pointer)+4, (filename:Pointer), len)

        uartSendBlock(FILESYSPKT_OPEN, data, len+4)
        delete data

        val response = uartReceiveDataPtk()
        if response = null then return 0

        val ret = response[0]
        delete response
        return ret


    # ######################################################################
    #                          UartSendBlock
    # ######################################################################
    # Send a block of data over the UART

    fun uartSendBlock(cmd:Int, data:Array<Int>, len:Int)
        if cmd&0xff != 0xB0  or (len&03) != 0
            error = ERROR_INVALID_ARG
            return

        # calculate the checksum
        var sum = cmd
        for i = 0 to< len/4
            sum += data[i]

        uartTransmitWord(cmd)
        uartTransmitWord(len)
        uartTransmitWord(sum)
        for i = 0 to< len/4
            uartTransmitWord(data[i])

    # ######################################################################
    #                          UartReceiveBlock
    # ######################################################################
    # Receive a data block over the UART

    fun uartReceiveDataPtk() -> Array<Int>?
        if error!=0 then return null
        
        val cmd = uartReceiveCmdWord()
        if error!=0 then return null

        val len = uartReceiveWord()
        if error!=0 then return null

        val sum = uartReceiveWord()
        if error!=0 then return null

        val data = new Array<Int>(len/4)
        var rsum = cmd
        for i = 0 to< len/4
            data[i] = uartReceiveWord()
            rsum += data[i]
            if error!=0 
                delete data
                return null
        
        if rsum != sum
            error = ERROR_DATA_CORRUPT
            delete data
            return null

        if cmd = FILESYSPKT_DATA
            return data

        if cmd = FILESYSPKT_ERROR
            error = data[0]
            delete data
            return null

        error = ERROR_PROTOCOL
        delete data
        return null

    # ######################################################################
    #                          uartReceiveWord
    # ######################################################################
    # Receive a data word over the UART
    # Returns -1 on timeout and sets error to ERROR_TIMEOUT

    fun uartReceiveWord() -> Int
        var timeout = 100
        var byte0 = -1
        while byte0 = -1 and timeout > 0
            byte0 = uartReceiveByte()
            timeout -= 1
        
        if byte0 = -1
            error = ERROR_TIMEOUT
            return -1

        val byte1 = uartReceiveByteWithTimeout()
        if byte1 = -1 then return -1

        val byte2 = uartReceiveByteWithTimeout()
        if byte2 = -1 then return -1

        val byte3 = uartReceiveByteWithTimeout()
        if byte3 = -1 then return -1

        return (byte0 & 0xff) | ((byte1 & 0xff) lsl 8) | ((byte2&0xff) lsl 16) | ((byte3 & 0xff) lsl 24)

    # ######################################################################
    #                          uartReceiveCommandWord
    # ######################################################################
    # Receive a command word over the UART.
    # Commands begin with the byte 0xB0. Allow a few other bytes to be received before the command.
    # Returns -1 on timeout and sets error to ERROR_TIMEOUT

    fun uartReceiveCmdWord() -> Int
        var timeout = 100
        var byte0 = -1
        while byte0 != 0xB0 and timeout > 0
            byte0 = uartReceiveByte()
            timeout -= 1
        
        if byte0 = -1 
            error = ERROR_TIMEOUT
            return -1

        val byte1 = uartReceiveByteWithTimeout()
        if byte1 = -1 then return -1

        val byte2 = uartReceiveByteWithTimeout()
        if byte2 = -1 then return -1

        val byte3 = uartReceiveByteWithTimeout()
        if byte3 = -1 then return -1

        return (byte0 & 0xff) | ((byte1 & 0xff) lsl 8) | ((byte2&0xff) lsl 16) | ((byte3 & 0xff) lsl 24)

    # ######################################################################
    #                          uartReceiveByte
    # ######################################################################
    # Receive a byte over the UART.
    # Allow about 100us for a timeout
    # Returns -1 on timeout and sets error

    fun uartReceiveByteWithTimeout() -> Int
        var timeout = 10000
        var ret = -1
        while ret = -1 and timeout > 0
            ret = hwRegs.uart_rx
            timeout -= 1
        if ret = -1 then error = ERROR_TIMEOUT
        return ret

    # ######################################################################
    #                          roundUpToMultipleOf4
    # ######################################################################

    fun roundUpToMultipleOf4(x:Int) -> Int
        return (x + 3) & 0xFFFFFFFC


