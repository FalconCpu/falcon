# ##########################################################
#                      CoommandLine
# ##########################################################
# This is a simple command line interpreter.

class CommandLine(val terminal:Terminal)
    val fs = new FileSystem()

    # ########################################################
    #             Command : Clear
    # ########################################################

    fun cmdClear(words:List<String>)
        if words.length=1
            terminal.clearScreen()
        else
            terminal.printString("Usage: clear\n")

    # ########################################################
    #             Command : Version
    # ########################################################

    fun cmdVersion(words:List<String>)
        if words.length=1
            terminal.printf("Version 0.1\n")
        else
            terminal.printf("Usage: version\n")

    # ########################################################
    #             Command : Echo
    # ########################################################

    fun cmdEcho(words:List<String>)
        for i=1 to <words.length
            terminal.printf("%s ",words.get(i))
        terminal.printf("\n")

    # ########################################################
    #             Command : Help
    # ########################################################

    fun cmdHelp(words:List<String>)
        if words.length=1
            terminal.printf("Available commands:\n")
            terminal.printf("  clear\n")
            terminal.printf("  version\n")
            terminal.printf("  echo <text>\n")
            terminal.printf("  help\n")
            terminal.printf("  ls\n")
            terminal.printf("  cat <filename>\n")

    # ########################################################
    #             Command : ls
    # ########################################################

    fun cmdLs(words:List<String>)
        # TODO - handle arguments
        if words.length>1
            terminal.printf("Usage ls\n")
            return

        val filename = "*"

        val dir = fs.openDirectory(filename)
        if dir=null
            terminal.printf("Error - Cannot ls '%s' %s\n", filename, getErrorString(fs.error))
            return
        
        repeat
            if (dir.attributes & FILE_ATTRIBUTE_DIRECTORY) != 0
                terminal.printf("%-20s    <dir>\n", dir.name)
            else
                terminal.printf("%-20s %8d\n", dir.name, dir.length)
        until not dir.nextEntry()
        delete dir

    # ########################################################
    #             Command : Cat
    # ########################################################

    fun cmdCat(words:List<String>)
        if words.length!=2
            terminal.printf("Usage: cat <filename>\n")
            return
        
        val file = fs.openFile(words.get(1),'r')
        if file=null
            terminal.printf("Cannot open file '%s' %s\n",  words.get(1), getErrorString(fs.error))
            return
        
        val buffer = new Array<Char>(1024)
        var bytesRead = 0
        repeat
            bytesRead = file.read(buffer, 1024)
            for i=0 to <bytesRead
                terminal.printf("%c", buffer[i])
        until bytesRead=0
        delete file

    # ########################################################
    #             command dumpmem
    # ########################################################

    fun hexToInt(string:String) -> Int
        var ret = 0
        for i = 0 to <string.length
            print("Hex to Int %c %x\n", string[i], ret)
            if string[i]>='0' and string[i]<='9'
                ret = ret * 16 + (string[i]-'0')
            elsif string[i]>='A' and string[i]<='F'
                ret = ret * 16 + (string[i]-'A') + 10
            elsif string[i]>='a' and string[i]<='f'
                ret = ret * 16 + (string[i]-'a') + 10
        return ret

    fun cmdDumpmem(words:List<String>)
        if words.length=1
            dumpMemorySystem()
            return
        
        val address = hexToInt(words.get(1))

        terminal.printf("Memory at %x:\n",address)
        val data = (address:Array<Int>)
        val datab = (address:Array<Char>)
        for r = 0 to <9
            terminal.printf("%08x: ",address+16*r)
            for i = 0 to <4
                terminal.printf("%08x ",data[4*r+i])
            terminal.printf("    ")
            for i = 0 to <16
                val b = datab[16*r+i]
                terminal.printf("%c",if b<32 then '.' else b)
            terminal.printf("\n")
            


    # ########################################################
    #             Execute command from file
    # ########################################################

    fun exec(words:List<String>)
        val file = fs.openFile(words.get(0),'r')
        if file=null
            terminal.printf("Cannot open file '%s' %s\n",  words.get(0), getErrorString(fs.error))
            return

        val hunks = new HunkFile(file)
        if hunks.error != ERROR_NONE
            terminal.printf("Cannot execute file '%s' %s\n", words.get(0), getErrorString(hunks.error))
            delete hunks
            delete file
            return

        # run the program
        val program = (hunks.hunkData.get(0) : (Terminal)->Unit)
        terminal.printf("About to run the program %x\n", program)
        terminal.printf("terminal = %x\n", terminal)
        program(terminal)
        terminal.printf("Program returned\n")
            
        delete hunks
        delete file

    fun processCommand(command: String)
        val words = splitString(command,' ')
        if words.length=0
            return
        when words.get(0)
            "clear" -> cmdClear(words)
            "version" -> cmdVersion(words)
            "echo" -> cmdEcho(words)
            "help" -> cmdHelp(words)
            "ls" -> cmdLs(words)
            "cat" -> cmdCat(words)
            "dumpmem" -> cmdDumpmem(words)
            else -> exec(words)
        for word in words
            delete word
        delete words

    fun run()
        terminal.printf("> ")
        val line = terminal.readLine()
        processCommand(line)


